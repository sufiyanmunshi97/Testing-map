

/**
 * Welcome to the Looker Visualization Builder! Please refer to the following resources 
 * to help you write your visualization:
 *  - API Documentation - https://github.com/looker/custom_visualizations_v2/blob/master/docs/api_reference.md
 *  - Example Visualizations - https://github.com/looker/custom_visualizations_v2/tree/master/src/examples
 **/

const visObject ={
 /**
  * Configuration options for your visualization. In Looker, these show up in the vis editor
  * panel but here, you can just manually set your default values in the code.
  **/
  options: {
    first_option: {
    	type: "string",
      label: "My First Option",
      default: "Default Value"
    },
    second_option: {
    	type: "number",
      label: "My Second Option",
      default: 42
    }
  },
  create: function(element, config) {
    element.innerHTML = `
          <style>

              * .mapchart{
              fill: #005DAA;
             
            }

						.land {
 							 fill: #999;
						}
            .groups text {
              font-size: 2em;
            }
            .mapchart, .map-tip {
                font-family: "Proxima Nova", Montserrat, sans-serif;
            }
            .map-tip {
              position: absolute;
              top: 10px;
              left: 20px;
              
            }
						.geojson {
              fill: none;
              stroke: red;
              stroke-width: 5;
            }
			
						
        body {
            background-color: #71808F;
            margin: 0px;
        }
     
      
        .center {
            text-align: center;
				
				}
				

		
          </style>
        
    <h1 class="center">World map</h1>



			`
    
        this.tooltip = d3.select(element)
          							 .append('div')
          							 .attr('class', 'map-tip')
        this.svg = d3.select(element)
          					 .append('svg')
  },
   
    /**
     * UpdateAsync is the function that gets called (potentially) multiple times. It receives
     * the data and should update the visualization with the new data.
     **/
 updateAsync: function(data, element, config, queryResponse, details, doneRendering){
   var width = 900, 
       height = 600; 
   const svg = this.svg
                   .html('')
                   .attr("width", width)
                   .attr("height", height)
                   .append("g")

   var projection = d3.geoAlbersUsa()
                      .scale(500)
                      .translate([width / 2, height / 2]);
 
   var path = d3.geoPath()
         .projection(projection);
   
   var g = svg.append("g");
   
   formattedData = []
   data.forEach(function(d) {
         formattedData.push({
           coordinate: d["user.coordinate"]["value"]
      });
         
       });
    var line=d3.line()
              .x(function (d) { return projection (d.coordinate)[0]; })
              .y(function (d) { return projection (d.coordinate)[1]; })
 
   d3.queue()
     .defer(d3.json,"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json")
   	 .defer(d3.tsv,"https://gist.githubusercontent.com/mbostock/4090846/raw/07e73f3c2d21558489604a0bc434b3a5cf41a867/us-state-names.tsv")
     .await(ready);
   
   
   
   function ready(error, states,tsv){
     
     var names = {};
    tsv.forEach(function(d,i){
      names[d.id] = d.name;});
     var data= topojson.feature(states, states.objects.states).features
    
     	 g.append("g")
        .selectAll("path")
        .data(data)
        .enter()
        .append("path")
        .attr( "d", path )
        .attr("class","states")
     		.attr("stroke","red")
     		.attr("fill","#808080")
     		.attr("name", function(d){ return d.properties.name;})
     		.call(d3.zoom().on("zoom", function () {
      					 svg.attr("transform", d3.event.transform)}))
 										.append("g");

     	 g.append("g")
       .attr("class", "states-names")
       .selectAll("text")
       .data(data)
       .enter()
       .append("svg:text")
       .text(function(d){
        	return names[d.id];
      	})
       .attr("x", function(d){
          return path.centroid(d)[0];
        })
       .attr("y", function(d){
          return path.centroid(d)[1];
        })
       .attr("text-anchor","middle")
       .attr('fill', 'white')
     	 .attr("font-size", "0.5em");
     
      g.selectAll("geojson")
       .data(formattedData).enter()
       .append("path")
       .attr("stroke","blue")
       .attr("fill","white")
       .attr('fill-opacity', 0.1)
       .attr("stroke-width",0.5)
       .attr("d",line(formattedData));

  
    
     		
   }
   doneRendering()
 }
};

looker.plugins.visualizations.add(visObject);
